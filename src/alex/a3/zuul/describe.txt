Задание 2: Зуул (12 баллов)

World-of-zuul - это простая, рудиментарная реализация текстовой приключенческой игры, разработанной
Дэвид Барнс и Майкл Келлинг проиллюстрируют несколько концепций, связанных с дизайном классов OO. Оригинальный
дизайн, как вы увидите, намеренно ужасающе плох.

Вы можете найти стартовый код в стартовом пакете, который можно загрузить с веб-сайта курса. Ваша
цель в этой задаче - исправить дизайн и, в конце концов, сделать несколько нетривиальных расширений.

Подзадача I: Прочитайте Код. Чтение кода - важный навык, требующий практики.
Ваше первое задание здесь заключается в том, чтобы прочитать часть существующего кода и попытаться понять, что он делает.
К концу вы, вероятно, поймете большую часть из этого.
Чтобы начать работать над этой задачей, попробуйте просмотреть большую часть кодовой базы. По ходу
дела отмечайте, как обстоят дела.

Подзадача II: Разобраться в хорошем дизайне и рефакторинге. Вы начнете с просмотра следующего
Видеоролики на YouTube, которые знакомят вас с процессом “обновления” дизайна Zuul посредством рефакторинга,
а также обучают конструкции Java, известной как enum:
• https://www.youtube.com/watch ?v=chaE5EvdfZQ
• https://www.youtube.com/watch?v=n_hpbJlZuNc
Подводя итог лекции, мы говорили о сцеплении и когезии. Связь - это примерно степень
зависимостей между отдельными блоками программы. Если два класса тесно зависят
друг от друга во многих деталях, они тесно связаны. Мы должны стремиться к слабой связи: классы не зависят (слишком
сильно) от деталей других классов. Инкапсуляция - это способ уменьшить сцепление.

Сплоченность - это то, за сколько и насколько разнообразно отвечает одна единица (например, метод или класс).
Если программный блок отвечает за одну логическую задачу, он обладает высокой связностью.
Мы должны стремиться к высокой сплоченности.
В конкретных терминах это означает: класс должен представлять только одну и только одну четко определенную сущность,
а метод должен отвечать за одну и только одну четко определенную задачу.
Когда мы замечаем значительное дублирование кода, это является сильным показателем плохого дизайна; обычно
это симптом низкой согласованности (противоположность тому, чего мы хотим). Рефакторинг часто является лекарством.

Подзадача III: Сделайте небольшие расширения. В качестве небольшого упражнения для разминки внесите некоторые изменения в
код. Для этой подзадачи нечего сдавать. Но это поможет вам ориентироваться в этой кодовой базе.
Примеры изменений, которые вы можете внести:
• измените название местоположения на что-то другое.
• измените выходы — выберите комнату, которая в данный момент находится к западу от другой комнаты, и переместите ее на север
• добавьте комнату (или две, или три, ...)

Подзадача IV: Рефакторинг для получения хорошего дизайна. Теперь, когда вы знакомы с кодом и изучили
некоторые принципы проектирования, вы проведете рефакторинг кода Zuul таким образом, чтобы он соблюдал хорошие принципы проектирования и
следовал лучшим практикам, которые вы только что изучили.
Вот некоторые вопиющие вещи, среди прочего, которые вам действительно следует исправить:
• В игровом классе printWelcome и goRoom содержится большой фрагмент повторяющегося кода. Основная
причина, по-видимому, заключается в том, что каждый из этих методов направлен на выполнение нескольких задач. Улучшите код
, написав отдельный, более связный метод, единственной задачей которого является печать информации о
текущем местоположении — и заставьте их вызывать его.
• Класс Game (очень) интенсивно использует информацию о выходе из класса Room. Эти общедоступные
переменные-члены неприятны. Избавься от них. Пока вы этим занимаетесь, оптимизируйте его с помощью хэш-карты. Идеально,
внесение изменений локально в класс помещения не должно влиять на другие классы (слабая связь). Но здесь
дело не в этом. Удалив переменные exit, код даже не будет скомпилирован. Классы действительно
тесно связаны между собой. Стремитесь уменьшить сцепление, убедившись, что инкапсуляция работает должным образом.
• В setExits заложены знания о возможных направлениях выхода. Уменьшите эту связь,
вместо этого написав setExit(направление строки, сосед по комнате).
• Когда вы видите стену "если", повторяющуюся снова и снова, это должно заставить вас задуматься
, можно ли их объединить или устранить.
• Помните видео с перечислением, которое вы только что посмотрели?

Подзадача V: Больше функциональности. Вы расширите программу, чтобы она поддерживала все следующее:

1. Добавьте еще два направления “вверх” и “вниз”. Обязательно протестируйте это, добавив несколько комнат, в которых используются эти
указания.

2. Выполните команду “look”. Это будет в дополнение к существующим командам, таким как “перейти...”
и “уволиться”. Команда “посмотреть” выведет возможные выходы в вашем текущем местоположении (
т.е. осмотрит комнату), аналогично тому, что вы бы отображали при входе в комнату с помощью кнопки “перейти”.
команда. Чтобы получить представление о том, что делает “look”, предположим, что вы находитесь в пабе кампуса, команда
отобразит:
Вы находитесь в пабе кампуса
Выходы: восточные

3. Выполните команду “назад”, которая вернет вас в комнату, в которой вы были в последний раз.

4. Добавьте особый вид комнаты: волшебную комнату-транспортер, где каждый раз, когда вы входите в нее, вы
переноситесь в случайную комнату в вашей игре. Как бы вы представили такую комнату?

Ожидания: Эта задача носит открытый характер и будет оцениваться с учетом этого. Наша цель в решении этой задачи состоит в том, чтобы
заставит вас задуматься о хорошем дизайне класса (исправив плохой и расширив его, чтобы делать замечательные вещи).
С этой целью отправляемый вами код должен быть написан профессионально (комментарии и отступы!)
и будет оценен за
• корректность
• хороший объектно-ориентированный дизайн
• надлежащее использование языковых конструкций
• стиль (комментарии, отступы и т.д.)